from typing import Any

def nms(dets: Any, scores: Any, threshold: float) -> Any: ...
def roi_align_forward(input: Any, rois: Any, spatial_scale: float, pooled_height: int, pooled_width: int, sampling_ratio: int) -> Any: ...
def roi_align_backward(grad: Any, rois: Any, spatial_scale: float, pooled_height: int, pooled_width: int, batch_size: int, channels: int, height: int, width: int, sampling_ratio: int) -> Any: ...
def roi_pool_forward(input: Any, rois: Any, spatial_scale: float, pooled_height: int, pooled_width: int) -> Any: ...
def roi_pool_backward(grad: Any, input: Any, rois: Any, argmax: Any, spatial_scale: float, pooled_height: int, pooled_width: int, batch_size: int, channels: int, height: int, width: int) -> Any: ...
def sigmoid_focal_loss_forward(logits: Any, targets: Any, num_classes: int, gamma: float, alpha: float) -> Any: ...
def sigmoid_focal_loss_backward(logits: Any, targets: Any, d_losses: Any, num_classes: int, gamma: float, alpha: float) -> Any: ...
def deform_conv_forward(input: Any, weight: Any, offset: Any, output: Any, columns: Any, ones: Any, kW: int, kH: int, dW: int, dH: int, padW: int, padH: int, dilationW: int, dilationH: int, group: int, deformable_group: int, im2col_step: int) -> Any: ...
def deform_conv_backward_input(input: Any, offset: Any, gradOutput: Any, gradInput: Any, gradOffset: Any, weight: Any, columns: Any, kW: int, kH: int, dW: int, dH: int, padW: int, padH: int, dilationW: int, dilationH: int, group: int, deformable_group: int, im2col_step: int) -> Any: ...
def deform_conv_backward_parameters(input: Any, offset: Any, gradOutput: Any, gradWeight: Any, columns: Any, ones: Any, kW: int, kH: int, dW: int, dH: int, padW: int, padH: int, dilationW: int, dilationH: int, group: int, deformable_group: int, scale: float, im2col_step: int) -> Any: ...
def modulated_deform_conv_forward(input: Any, weight: Any, bias: Any, ones: Any, offset: Any, mask: Any, output: Any, columns: Any, kernel_h: int, kernel_w: int, stride_h: int, stride_w: int, pad_h: int, pad_w: int, dilation_h: int, dilation_w: int, group: int, deformable_group: int, with_bias: bool) -> Any: ...
def modulated_deform_conv_backward(input: Any, weight: Any, bias: Any, ones: Any, offset: Any, mask: Any, columns: Any, grad_input: Any, grad_weight: Any, grad_bias: Any, grad_offset: Any, grad_mask: Any, grad_output: Any, kernel_h: int, kernel_w: int, stride_h: int, stride_w: int, pad_h: int, pad_w: int, dilation_h: int, dilation_w: int, group: int, deformable_group: int, with_bias: bool) -> Any: ...
def deform_psroi_pooling_forward(input: Any, bbox: Any, trans: Any, out: Any, top_count: Any, no_trans: bool, spatial_scale: float, output_dim: int, group_size: int, pooled_size: int, part_size: int, sample_per_part: int, trans_std: float) -> Any: ...
def deform_psroi_pooling_backward(out_grad: Any, input: Any, bbox: Any, trans: Any, top_count: Any, input_grad: Any, trans_grad: Any, no_trans: bool, spatial_scale: float, output_dim: int, group_size: int, pooled_size: int, part_size: int, sample_per_part: int, trans_std: float) -> Any: ...
